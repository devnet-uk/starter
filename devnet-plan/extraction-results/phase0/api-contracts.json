{
  "version": "1.0.0",
  "timestamp": "2025-01-29T18:45:00.000Z",
  "project": "devnet.clean_architecture",
  "apiStructure": {
    "framework": "HonoJS",
    "basePath": "/api",
    "middleware": [
      "loggerMiddleware",
      "corsMiddleware", 
      "authMiddleware (per route)"
    ],
    "documentation": {
      "openapi": "/api/openapi",
      "docs": "/api/docs (Scalar UI)"
    }
  },
  "routers": [
    {
      "name": "authRouter",
      "basePath": "/auth",
      "description": "Delegates to Better-Auth handler",
      "endpoints": [
        {
          "method": "GET",
          "path": "/auth/**",
          "description": "All auth GET requests handled by Better-Auth"
        },
        {
          "method": "POST", 
          "path": "/auth/**",
          "description": "All auth POST requests handled by Better-Auth"
        }
      ]
    },
    {
      "name": "aiRouter",
      "basePath": "/ai",
      "authentication": "required",
      "description": "AI chat management",
      "endpoints": [
        {
          "method": "GET",
          "path": "/ai/chats",
          "description": "Get all chats for current user or organization",
          "queryParams": {
            "organizationId": "string (optional)"
          },
          "response": {
            "200": "{ chats: ChatSchema[] }"
          },
          "authorization": "User can access own chats or org chats where they're a member"
        },
        {
          "method": "GET",
          "path": "/ai/chats/:id",
          "description": "Get a specific chat by ID",
          "response": {
            "200": "{ chat: ChatSchema }",
            "404": "Chat not found",
            "403": "Forbidden"
          },
          "authorization": "Chat owner or organization member"
        },
        {
          "method": "POST",
          "path": "/ai/chats",
          "description": "Create a new chat",
          "requestBody": {
            "title": "string (optional)",
            "organizationId": "string (optional)"
          },
          "response": {
            "200": "{ chat: ChatSchema }",
            "500": "Failed to create chat"
          },
          "authorization": "Must be organization member if organizationId provided"
        },
        {
          "method": "PUT",
          "path": "/ai/chats/:id", 
          "description": "Update chat title",
          "requestBody": {
            "title": "string (optional)"
          },
          "response": {
            "200": "{ chat: ChatSchema }",
            "404": "Chat not found",
            "403": "Forbidden"
          }
        },
        {
          "method": "DELETE",
          "path": "/ai/chats/:id",
          "description": "Delete a chat",
          "response": {
            "204": "Chat deleted",
            "404": "Chat not found",
            "403": "Forbidden"
          }
        },
        {
          "method": "POST",
          "path": "/ai/chats/:id/messages",
          "description": "Send messages to AI and get streaming response",
          "requestBody": {
            "messages": [
              {
                "role": "user | assistant",
                "content": "string"
              }
            ]
          },
          "response": {
            "200": "Stream response from AI model"
          }
        }
      ],
      "dataSchemas": {
        "ChatSchema": {
          "id": "string",
          "organizationId": "string | null",
          "userId": "string | null",
          "title": "string | null", 
          "messages": "MessageSchema[]",
          "createdAt": "Date",
          "updatedAt": "Date | null"
        },
        "MessageSchema": {
          "role": "user | assistant",
          "content": "string"
        }
      }
    },
    {
      "name": "organizationsRouter",
      "basePath": "/organizations",
      "endpoints": [
        {
          "method": "GET",
          "path": "/organizations/generate-slug",
          "description": "Generate a unique slug for an organization",
          "queryParams": {
            "name": "string (required)"
          },
          "response": {
            "200": "{ slug: string }",
            "400": "{ error: 'No available slug found' }"
          },
          "businessLogic": [
            "Slugifies the name to lowercase",
            "Checks database for existing slug",
            "If exists, appends nanoid(5) suffix",
            "Tries up to 3 times to find unique slug",
            "Returns error if no unique slug found"
          ]
        }
      ]
    },
    {
      "name": "healthRouter",
      "basePath": "/health",
      "description": "Health check endpoint"
    },
    {
      "name": "uploadsRouter", 
      "basePath": "/uploads",
      "description": "File upload management"
    },
    {
      "name": "paymentsRouter",
      "basePath": "/payments", 
      "description": "Payment processing"
    },
    {
      "name": "contactRouter",
      "basePath": "/contact",
      "description": "Contact form handling"
    },
    {
      "name": "newsletterRouter",
      "basePath": "/newsletter",
      "description": "Newsletter subscription"
    },
    {
      "name": "webhooksRouter",
      "basePath": "/webhooks",
      "description": "External webhook handlers"
    },
    {
      "name": "adminRouter",
      "basePath": "/admin",
      "description": "Admin functionality"
    }
  ],
  "authorizationPatterns": [
    {
      "pattern": "Organization Membership Verification",
      "description": "verifyOrganizationMembership(organizationId, userId)",
      "usage": "Used in AI routes to ensure users can only access org resources they're members of"
    },
    {
      "pattern": "Resource Ownership",
      "description": "Check if userId matches resource owner or organization member",
      "usage": "Chat access, update, delete operations"
    },
    {
      "pattern": "Better-Auth Integration",
      "description": "Authentication handled by Better-Auth library",
      "usage": "All /auth/** routes delegated to Better-Auth handler"
    }
  ],
  "businessRules": [
    {
      "domain": "AI Chats",
      "rules": [
        "Chats can belong to a user OR an organization (not both)",
        "Users can only access their own chats or chats from orgs they're members of",
        "Chat messages are stored and updated when AI responds",
        "AI responses are streamed back to the client",
        "Chat updates (title changes) require ownership or org membership"
      ]
    },
    {
      "domain": "Organizations",
      "rules": [
        "Organization slugs must be unique across the system",
        "Slug generation tries up to 3 times with nanoid suffixes",
        "Organization membership is verified for resource access"
      ]
    },
    {
      "domain": "Authentication",
      "rules": [
        "All auth flows handled by Better-Auth library",
        "Auth middleware required for protected routes",
        "User context available as c.get('user') in protected routes"
      ]
    }
  ],
  "dataFlow": [
    {
      "operation": "Create AI Chat",
      "flow": [
        "Client POST /ai/chats with optional organizationId",
        "Verify organization membership if organizationId provided",
        "Call createAiChat() database function",
        "Return chat object with generated ID"
      ]
    },
    {
      "operation": "Send AI Message",
      "flow": [
        "Client POST /ai/chats/:id/messages with messages array",
        "Verify chat ownership/membership", 
        "Stream response from AI model",
        "Update chat with new messages on completion",
        "Return streaming response to client"
      ]
    },
    {
      "operation": "Generate Organization Slug",
      "flow": [
        "Client GET /organizations/generate-slug?name=X",
        "Slugify name to lowercase",
        "Check getOrganizationBySlug() for uniqueness",
        "If exists, append nanoid(5) and retry (max 3 attempts)",
        "Return unique slug or error"
      ]
    }
  ],
  "gaps": [
    "Many router implementations not examined (payments, uploads, admin, etc.)",
    "No performance SLAs defined",
    "Error handling patterns not fully documented",
    "Rate limiting not visible",
    "Caching strategies not documented",
    "Validation error response formats not standardized"
  ],
  "nextSteps": [
    "Examine remaining router implementations",
    "Document error response patterns",
    "Capture middleware implementations",
    "Map database query patterns",
    "Identify caching and performance optimizations"
  ]
}