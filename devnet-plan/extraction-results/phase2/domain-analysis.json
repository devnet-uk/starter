{
  "version": "1.0.0",
  "timestamp": "2025-01-29T18:55:00.000Z",
  "project": "devnet.clean_architecture",
  "phase": "Phase 2: Domain Entity & Use Case Extraction",
  "executiveSummary": {
    "domainComplexity": "medium",
    "currentArchitecture": "database-first with scattered business logic",
    "extractionReadiness": "high",
    "primaryFindings": [
      "7 core domain entities identified",
      "Business logic scattered across query files and route handlers",
      "Clear authorization patterns emerging",
      "AI streaming capabilities require special handling"
    ]
  },
  "domainEntities": {
    "coreEntities": [
      {
        "name": "User",
        "location": "packages/database/drizzle/schema/postgres.ts:22-40",
        "properties": {
          "identifiers": ["id", "email", "username"],
          "businessCritical": ["emailVerified", "onboardingComplete", "banned", "role"],
          "metadata": ["name", "image", "locale", "paymentsCustomerId"],
          "audit": ["createdAt", "updatedAt"],
          "temporal": ["banExpires"]
        },
        "businessRules": [
          "Email must be unique",
          "Users can be banned with expiration",
          "Onboarding process tracks completion",
          "Role-based access control (admin/user)",
          "Email verification required"
        ],
        "relationships": {
          "sessions": "one-to-many",
          "accounts": "one-to-many", 
          "passkeys": "one-to-many",
          "memberships": "one-to-many (organization membership)",
          "purchases": "one-to-many",
          "aiChats": "one-to-many",
          "twoFactors": "one-to-many",
          "invitations": "one-to-many (as inviter)"
        }
      },
      {
        "name": "Organization",
        "location": "packages/database/drizzle/schema/postgres.ts:123-138",
        "properties": {
          "identifiers": ["id", "slug"],
          "businessCritical": ["name"],
          "metadata": ["logo", "metadata", "paymentsCustomerId"],
          "audit": ["createdAt"]
        },
        "businessRules": [
          "Slug must be unique for URL routing",
          "Organizations have payment customer associations",
          "Members are tracked with roles"
        ],
        "relationships": {
          "members": "one-to-many",
          "invitations": "one-to-many",
          "purchases": "one-to-many",
          "aiChats": "one-to-many"
        }
      },
      {
        "name": "Member",
        "location": "packages/database/drizzle/schema/postgres.ts:140-161",
        "properties": {
          "identifiers": ["id"],
          "foreignKeys": ["organizationId", "userId"],
          "businessCritical": ["role"],
          "audit": ["createdAt"]
        },
        "businessRules": [
          "User-Organization membership must be unique",
          "Role-based permissions within organization",
          "Cascade delete when user or organization removed"
        ],
        "relationships": {
          "organization": "many-to-one",
          "user": "many-to-one"
        }
      },
      {
        "name": "Purchase",
        "location": "packages/database/drizzle/schema/postgres.ts:179-196",
        "properties": {
          "identifiers": ["id"],
          "businessCritical": ["type", "customerId", "productId", "status"],
          "subscriptions": ["subscriptionId"],
          "audit": ["createdAt", "updatedAt"]
        },
        "businessRules": [
          "Can belong to user or organization (not both)",
          "Subscription purchases must have unique subscriptionId",
          "Type enum: SUBSCRIPTION or ONE_TIME",
          "Payment provider integration via customerId"
        ],
        "relationships": {
          "organization": "many-to-one (optional)",
          "user": "many-to-one (optional)"
        }
      },
      {
        "name": "AiChat",
        "location": "packages/database/drizzle/schema/postgres.ts:198-216",
        "properties": {
          "identifiers": ["id"],
          "businessCritical": ["messages"],
          "metadata": ["title"],
          "audit": ["createdAt", "updatedAt"]
        },
        "businessRules": [
          "Can belong to user or organization (not both)",
          "Messages stored as JSON array with role/content structure",
          "Streaming updates require special handling",
          "Authorization checks for access control"
        ],
        "relationships": {
          "organization": "many-to-one (optional)",
          "user": "many-to-one (optional)"
        }
      },
      {
        "name": "Session",
        "location": "packages/database/drizzle/schema/postgres.ts:42-61",
        "properties": {
          "identifiers": ["id", "token"],
          "security": ["expiresAt", "ipAddress", "userAgent"],
          "businessCritical": ["userId", "activeOrganizationId"],
          "audit": ["createdAt", "updatedAt"],
          "special": ["impersonatedBy"]
        },
        "businessRules": [
          "Token must be unique for session identification",
          "Sessions expire at specified time",
          "Active organization context stored",
          "Admin impersonation capability",
          "Cascade delete when user removed"
        ],
        "relationships": {
          "user": "many-to-one"
        }
      },
      {
        "name": "Invitation",
        "location": "packages/database/drizzle/schema/postgres.ts:163-177",
        "properties": {
          "identifiers": ["id"],
          "businessCritical": ["email", "status", "role"],
          "temporal": ["expiresAt"],
          "audit": ["inviterId", "organizationId"]
        },
        "businessRules": [
          "Email-based invitation system",
          "Status tracking (pending, accepted, expired)",
          "Time-limited invitations",
          "Role pre-assignment for new members"
        ],
        "relationships": {
          "organization": "many-to-one",
          "inviter": "many-to-one (User)"
        }
      }
    ],
    "supportingEntities": [
      {
        "name": "Account",
        "purpose": "External authentication provider accounts",
        "location": "packages/database/drizzle/schema/postgres.ts:63-82"
      },
      {
        "name": "Passkey",
        "purpose": "WebAuthn passkey authentication",
        "location": "packages/database/drizzle/schema/postgres.ts:95-110"
      },
      {
        "name": "TwoFactor",
        "purpose": "TOTP two-factor authentication",
        "location": "packages/database/drizzle/schema/postgres.ts:112-121"
      },
      {
        "name": "Verification",
        "purpose": "Email/SMS verification tokens", 
        "location": "packages/database/drizzle/schema/postgres.ts:84-93"
      }
    ]
  },
  "currentUseCases": {
    "userManagement": [
      {
        "name": "User Registration",
        "location": "packages/database/drizzle/queries/users.ts:40-67",
        "businessLogic": [
          "Generate unique user ID with nanoid",
          "Set initial role (admin/user)",
          "Track email verification status",
          "Initialize onboarding state",
          "Create audit timestamps"
        ],
        "dependencies": ["email validation", "role assignment"]
      },
      {
        "name": "User Authentication",
        "location": "packages/auth/auth.ts + Better-Auth integration",
        "businessLogic": [
          "Delegate to Better-Auth for auth flows",
          "Session management with organization context",
          "Multi-factor authentication support",
          "Passkey/WebAuthn integration"
        ]
      },
      {
        "name": "User Profile Management",
        "location": "packages/database/drizzle/queries/users.ts:101-105",
        "businessLogic": [
          "Update user profile information",
          "Handle role changes",
          "Manage ban status and expiration"
        ],
        "issues": ["updateUser function lacks type safety (line 102: any)"]
      }
    ],
    "organizationManagement": [
      {
        "name": "Organization Membership Verification",
        "location": "packages/api/src/routes/organizations/lib/membership.ts",
        "businessLogic": [
          "Verify user belongs to organization",
          "Check member role permissions",
          "Throw authorization exceptions"
        ],
        "usage": "Used extensively in AI chat authorization"
      },
      {
        "name": "Organization Lookup with Metrics",
        "location": "packages/database/drizzle/queries/organizations.ts:7-30",
        "businessLogic": [
          "Search organizations by name",
          "Calculate member count dynamically",
          "Support pagination and filtering"
        ],
        "complexity": "Uses SQL extras for aggregated member counts"
      },
      {
        "name": "Invitation Management",
        "location": "packages/database/drizzle/queries/organizations.ts:95-100",
        "businessLogic": [
          "Find pending invitations by email",
          "Handle invitation status workflow",
          "Connect to organization membership"
        ]
      }
    ],
    "aiChatManagement": [
      {
        "name": "AI Chat CRUD Operations",
        "location": "packages/api/src/routes/ai.ts:116-162",
        "businessLogic": [
          "Create chats for user or organization context",
          "Verify membership before organization chat creation",
          "Handle chat title and metadata management"
        ],
        "authorization": "Dual context: personal vs organizational chats"
      },
      {
        "name": "AI Message Streaming",
        "location": "packages/api/src/routes/ai.ts:244-310",
        "businessLogic": [
          "Validate chat ownership/membership",
          "Stream AI responses in real-time",
          "Update chat messages after completion",
          "Handle conversation state management"
        ],
        "complexity": "Async streaming with onFinish callbacks"
      },
      {
        "name": "Chat Authorization",
        "location": "packages/api/src/routes/ai.ts:104-111",
        "businessLogic": [
          "Organizational chats require membership verification",
          "Personal chats require user ownership",
          "Consistent pattern across all chat endpoints"
        ]
      }
    ],
    "purchaseManagement": [
      {
        "name": "Purchase Tracking",
        "location": "packages/database/drizzle/queries/purchases.ts (referenced)",
        "businessLogic": [
          "Track subscription vs one-time purchases",
          "Link to payment provider customer IDs",
          "Support both user and organization purchases"
        ]
      }
    ]
  },
  "businessRulesIdentified": [
    {
      "domain": "Authorization",
      "rule": "Dual Context Access Control",
      "description": "Resources can belong to individual users OR organizations, requiring different authorization checks",
      "locations": [
        "AI chat access control",
        "Purchase ownership",
        "Session organization context"
      ]
    },
    {
      "domain": "Organization",
      "rule": "Membership Role Verification",
      "description": "Organization operations require active membership verification with role-based permissions",
      "implementation": "verifyOrganizationMembership() used across AI endpoints"
    },
    {
      "domain": "User Lifecycle",
      "rule": "Progressive Onboarding",
      "description": "Users have onboarding completion tracking and email verification requirements",
      "states": ["created", "email verified", "onboarding complete", "active"]
    },
    {
      "domain": "Session Management", 
      "rule": "Organization Context Switching",
      "description": "Sessions track active organization for context-sensitive operations",
      "usage": "activeOrganizationId in session determines default organization scope"
    },
    {
      "domain": "AI Chat",
      "rule": "Conversation Persistence",
      "description": "Chat messages are persisted after AI response completion using streaming callbacks",
      "complexity": "Async update pattern with onFinish handlers"
    }
  ],
  "architecturalGaps": [
    {
      "gap": "Missing Use Case Layer",
      "description": "Business logic embedded in query functions and route handlers",
      "impact": "Difficult to test business rules in isolation",
      "locations": [
        "AI chat authorization mixed with HTTP handling",
        "Organization membership checks scattered",
        "Purchase logic in database queries"
      ]
    },
    {
      "gap": "Type Safety Issues",
      "description": "Database operations use 'any' type and lack proper error handling",
      "examples": [
        "updateUser function (users.ts:101)",
        "updateOrganization function (organizations.ts:102)"
      ]
    },
    {
      "gap": "Domain Model Anemia",
      "description": "Entities are data containers without behavior",
      "missing": [
        "User.canAccessOrganization()",
        "Organization.addMember()",
        "AiChat.authorize()",
        "Purchase.isActive()"
      ]
    },
    {
      "gap": "Inconsistent Error Handling",
      "description": "Error handling patterns vary across operations",
      "issues": [
        "HTTP exceptions in route handlers",
        "Null returns from database queries",
        "No standardized error types"
      ]
    }
  ],
  "migrationOpportunities": [
    {
      "opportunity": "Extract Authorization Use Cases",
      "description": "Centralize dual-context authorization logic",
      "benefits": [
        "Consistent security patterns",
        "Easier testing and maintenance",
        "Clear business rule documentation"
      ]
    },
    {
      "opportunity": "Create Rich Domain Models",
      "description": "Add behavior methods to entity classes",
      "approach": "Wrap database types with domain logic methods"
    },
    {
      "opportunity": "Implement Command/Query Separation",
      "description": "Separate read and write operations",
      "current": "Mixed CRUD operations in query files",
      "target": "Commands for mutations, Queries for reads"
    },
    {
      "opportunity": "Standardize Error Handling",
      "description": "Create consistent error types and handling patterns",
      "scope": "Database operations, API responses, business rule violations"
    }
  ],
  "nextPhaseInputs": {
    "interfaceAdapters": [
      "HonoJS route handlers in packages/api/src/routes/",
      "Middleware for authentication and authorization",
      "Database query adapters in packages/database/drizzle/queries/",
      "External service integrations (AI, payments)"
    ],
    "frameworksAndDrivers": [
      "Drizzle ORM database driver",
      "Better-Auth authentication framework", 
      "AI SDK for streaming responses",
      "Payment provider integrations",
      "Next.js frontend framework"
    ]
  }
}